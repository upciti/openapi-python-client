import datetime
from dateutil.parser import isoparse
from typing import Any, Dict, Optional, Union, cast, List
from .client import Client as InnerClient, AuthenticatedClient
from .types import UNSET, File, Response, Unset


from .models import (
    {% for import in imports | sort %}
    {{ import }},
    {% endfor %}
)

from .api import (
    {% for tag, collection in endpoint_collections.items() %}
    {{ tag | snakecase }},
    {% endfor %}
)

{% from "endpoint_macros.py.jinja" import arguments, client, kwargs, return_type %}


{% for tag, collection in endpoint_collections.items() %}

class {{ tag | pascalcase }}Api:

    def __init__(self, client: InnerClient):
        self._client = client

    {% for endpoint in collection.endpoints %}
    {% set return_string = return_type(endpoint) %}
    {% set parsed_responses = (endpoint.responses | length > 0) and return_string != "None" %}

    {% if parsed_responses %}
    async def {{ endpoint.name | snakecase }}(
        self,
        {{ arguments(endpoint, False) | indent(8) }}
    ) -> Optional[{{ return_string | indent(4) }}]:
        {% if endpoint.requires_security %}
        client = cast(AuthenticatedClient, self._client)
        {% else %}
        client = self._client
        {% endif %}
        return await {{ tag }}.{{ endpoint.name | snakecase }}.asyncio(
            {{ kwargs(endpoint) | indent(12) }}
        )
    {% endif %}

    async def {{ endpoint.name | snakecase }}_detailed(
        self,
        {{ arguments(endpoint, False) | indent(8) }}
    ) -> Response[{{ return_string | indent(4) }}]:
        {% if endpoint.requires_security %}
        client = cast(AuthenticatedClient, self._client)
        {% else %}
        client = self._client
        {% endif %}
        return await {{ tag }}.{{ endpoint.name | snakecase }}.asyncio_detailed(
            {{ kwargs(endpoint) | indent(12) }}
        )

    {% endfor %}


class Sync{{ tag | pascalcase }}Api:

    def __init__(self, client: InnerClient):
        self._client = client

    {% for endpoint in collection.endpoints %}
    {% set return_string = return_type(endpoint) %}
    {% set parsed_responses = (endpoint.responses | length > 0) and return_string != "None" %}

    {% if parsed_responses %}
    def {{ endpoint.name | snakecase }}(
        self,
        {{ arguments(endpoint, False) | indent(8) }}
    ) -> Optional[{{ return_string | indent(4) }}]:
        {% if endpoint.requires_security %}
        client = cast(AuthenticatedClient, self._client)
        {% else %}
        client = self._client
        {% endif %}
        return {{ tag }}.{{ endpoint.name | snakecase }}.sync(
            {{ kwargs(endpoint) | indent(12) }}
        )
    {% endif %}

    def {{ endpoint.name | snakecase }}_detailed(
        self,
        {{ arguments(endpoint, False) | indent(8) }}
    ) -> Response[{{ return_string | indent(4) }}]:
        {% if endpoint.requires_security %}
        client = cast(AuthenticatedClient, self._client)
        {% else %}
        client = self._client
        {% endif %}
        return {{ tag }}.{{ endpoint.name | snakecase }}.sync_detailed(
            {{ kwargs(endpoint) | indent(12) }}
        )

    {% endfor %}

{% endfor %}

{% for prefix in '', 'Sync' %}

class {{ prefix }}{{ client_name }}:
    def __init__(self, base_url: Optional[str] = None, timeout: float = 5.0, token: Optional[str] = None):
        if token is None:
            self.connection = InnerClient(
                base_url=base_url,
                timeout=timeout)
        else:
            self.connection = AuthenticatedClient(
                base_url=base_url,
                timeout=timeout,
                token=token)
        {% for tag, collection in endpoint_collections.items() %}
        self.{{ tag | snakecase }} = {{ prefix }}{{ tag | pascalcase }}Api(self.connection)
        {% endfor %}

{% endfor %}
